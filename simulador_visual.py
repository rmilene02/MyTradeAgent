"""
üéÆ SIMULADOR VISUAL DA ESTRAT√âGIA
Veja sua estrat√©gia funcionando em tempo real com gr√°ficos visuais!
Built with love by Moon Dev üöÄ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.data.ohlcv_collector import collect_token_data
from src.data.custom_indicators import *
from src.core.config import MONITORED_TOKENS
from termcolor import colored, cprint
import pandas as pd
import time

def print_chart_ascii(data, rows=15):
    """Cria um gr√°fico ASCII simples dos pre√ßos"""
    prices = data['close'].tail(50).values
    if len(prices) < 2:
        return
    
    min_price = min(prices)
    max_price = max(prices)
    price_range = max_price - min_price
    
    if price_range == 0:
        return
    
    print("\nüìà GR√ÅFICO DE PRE√áOS (√∫ltimos 50 per√≠odos):")
    print("=" * 60)
    
    for i in range(rows, 0, -1):
        line = ""
        threshold = min_price + (price_range * i / rows)
        
        for price in prices[-50:]:
            if price >= threshold:
                line += "‚ñà"
            else:
                line += " "
        
        print(f"{threshold:8.4f} |{line}")
    
    print(" " * 9 + "+" + "-" * 50)
    print(" " * 11 + "Tempo ‚Üí")

def print_bollinger_visual(data):
    """Mostra visualmente a posi√ß√£o nas Bollinger Bands"""
    last_row = data.iloc[-1]
    
    distance = last_row['distanciaMME9_pct']
    bb_upper = last_row['BB_Upper']
    bb_lower = last_row['BB_Lower']
    bb_middle = last_row['BB_Middle']
    
    print("\nüéØ BOLLINGER BANDS VISUAL:")
    print("=" * 50)
    
    # Criar escala visual
    scale_width = 40
    
    # Normalizar posi√ß√£o (0 = banda inferior, 1 = banda superior)
    if bb_upper != bb_lower:
        position = (distance - bb_lower) / (bb_upper - bb_lower)
        position = max(0, min(1, position))  # Limitar entre 0 e 1
    else:
        position = 0.5
    
    # Criar linha visual
    line = [" "] * scale_width
    pos_index = int(position * (scale_width - 1))
    line[pos_index] = "‚óè"
    
    # Marcar bandas
    line[0] = "["  # Banda inferior
    line[-1] = "]"  # Banda superior
    line[scale_width//2] = "|"  # Banda m√©dia
    
    visual_line = "".join(line)
    
    print(f"Banda Superior: {bb_upper:+.2f}%")
    print(f"Banda M√©dia:    {bb_middle:+.2f}%")
    print(f"Banda Inferior: {bb_lower:+.2f}%")
    print()
    print(f"Posi√ß√£o Atual:  {visual_line}")
    print(f"Dist√¢ncia:      {distance:+.2f}%")
    
    # Interpreta√ß√£o
    if position > 0.8:
        cprint("üî¥ ZONA DE EXAUST√ÉO DE ALTA!", "white", "on_red")
    elif position < 0.2:
        cprint("üü¢ ZONA DE EXAUST√ÉO DE BAIXA!", "white", "on_green")
    else:
        cprint("üòê ZONA NEUTRA", "white", "on_yellow")

def simulate_trading_session(token, periods=20):
    """Simula uma sess√£o de trading mostrando sinais em tempo real"""
    cprint(f"\nüéÆ SIMULADOR DE TRADING - {token}", "white", "on_magenta")
    cprint("Simulando sinais em tempo real...", "white", "on_magenta")
    
    try:
        # Coletar dados
        data = collect_token_data(token, days_back=10, timeframe='3m')
        
        if data is None or len(data) < 200:
            cprint(f"‚ùå Dados insuficientes para {token}", "white", "on_red")
            return
        
        # Aplicar indicadores
        data = calculate_distance_mme9(data)
        data = calculate_bollinger_on_distance(data)
        data = detect_exhaustion_signals(data)
        
        # Simular √∫ltimos per√≠odos
        start_idx = max(200, len(data) - periods)
        
        portfolio_value = 1000  # Come√ßar com $1000 simulados
        position = 0  # 0 = sem posi√ß√£o, 1 = comprado, -1 = vendido
        entry_price = 0
        trades_count = 0
        winning_trades = 0
        
        cprint(f"\nüí∞ PORTF√ìLIO INICIAL: ${portfolio_value:.2f}", "white", "on_blue")
        print("=" * 80)
        
        for i in range(start_idx, len(data)):
            current_data = data.iloc[:i+1]
            row = current_data.iloc[-1]
            
            print(f"\n‚è∞ Per√≠odo {i+1-start_idx+1}/{periods}")
            print(f"üí≤ Pre√ßo: ${row['close']:.6f}")
            print(f"üìä Dist√¢ncia MME9: {row['distanciaMME9_pct']:+.2f}%")
            
            # Mostrar sinais
            signal_text = ""
            action_taken = False
            
            if row['reversao_alta'] and position <= 0:
                signal_text = "üü¢ SINAL DE COMPRA!"
                if position == 0:  # Sem posi√ß√£o
                    position = 1
                    entry_price = row['close']
                    action_taken = True
                    trades_count += 1
                    cprint(f"‚úÖ COMPRANDO a ${entry_price:.6f}", "white", "on_green")
                elif position == -1:  # Vendido, fechar posi√ß√£o
                    profit = (entry_price - row['close']) / entry_price * portfolio_value
                    portfolio_value += profit
                    if profit > 0:
                        winning_trades += 1
                        cprint(f"‚úÖ FECHANDO VENDA com LUCRO: +${profit:.2f}", "white", "on_green")
                    else:
                        cprint(f"‚ùå FECHANDO VENDA com PREJU√çZO: ${profit:.2f}", "white", "on_red")
                    position = 1
                    entry_price = row['close']
                    trades_count += 1
                    cprint(f"‚úÖ COMPRANDO a ${entry_price:.6f}", "white", "on_green")
                    
            elif row['reversao_baixa'] and position >= 0:
                signal_text = "üî¥ SINAL DE VENDA!"
                if position == 0:  # Sem posi√ß√£o
                    position = -1
                    entry_price = row['close']
                    action_taken = True
                    trades_count += 1
                    cprint(f"‚úÖ VENDENDO a ${entry_price:.6f}", "white", "on_red")
                elif position == 1:  # Comprado, fechar posi√ß√£o
                    profit = (row['close'] - entry_price) / entry_price * portfolio_value
                    portfolio_value += profit
                    if profit > 0:
                        winning_trades += 1
                        cprint(f"‚úÖ FECHANDO COMPRA com LUCRO: +${profit:.2f}", "white", "on_green")
                    else:
                        cprint(f"‚ùå FECHANDO COMPRA com PREJU√çZO: ${profit:.2f}", "white", "on_red")
                    position = -1
                    entry_price = row['close']
                    trades_count += 1
                    cprint(f"‚úÖ VENDENDO a ${entry_price:.6f}", "white", "on_red")
                    
            elif row['exaustao_alta']:
                signal_text = "‚ö†Ô∏è EXAUST√ÉO DE ALTA - Aguardando revers√£o..."
            elif row['exaustao_baixa']:
                signal_text = "‚ö†Ô∏è EXAUST√ÉO DE BAIXA - Aguardando revers√£o..."
            else:
                signal_text = "üòê Sem sinais"
            
            print(f"üéØ {signal_text}")
            
            # Status da posi√ß√£o
            if position == 1:
                current_profit = (row['close'] - entry_price) / entry_price * portfolio_value
                print(f"üìà POSI√á√ÉO: COMPRADO a ${entry_price:.6f} (P&L: ${current_profit:+.2f})")
            elif position == -1:
                current_profit = (entry_price - row['close']) / entry_price * portfolio_value
                print(f"üìâ POSI√á√ÉO: VENDIDO a ${entry_price:.6f} (P&L: ${current_profit:+.2f})")
            else:
                print("üí§ POSI√á√ÉO: SEM POSI√á√ÉO")
            
            print(f"üí∞ PORTF√ìLIO: ${portfolio_value:.2f}")
            print("-" * 50)
            
            # Pausa para simular tempo real
            time.sleep(1)
        
        # Resumo final
        cprint(f"\nüèÅ RESUMO DA SIMULA√á√ÉO", "white", "on_blue")
        print("=" * 50)
        print(f"üí∞ Portf√≥lio Final: ${portfolio_value:.2f}")
        print(f"üìà Retorno: {((portfolio_value/1000)-1)*100:+.2f}%")
        print(f"üîÑ Total de Trades: {trades_count}")
        if trades_count > 0:
            win_rate = (winning_trades / trades_count) * 100
            print(f"üéØ Taxa de Acerto: {win_rate:.1f}% ({winning_trades}/{trades_count})")
        
        # Fechar posi√ß√£o final se necess√°rio
        if position != 0:
            final_row = data.iloc[-1]
            if position == 1:
                final_profit = (final_row['close'] - entry_price) / entry_price * portfolio_value
                print(f"üìä P&L da posi√ß√£o aberta: ${final_profit:+.2f}")
            else:
                final_profit = (entry_price - final_row['close']) / entry_price * portfolio_value
                print(f"üìä P&L da posi√ß√£o aberta: ${final_profit:+.2f}")
        
    except Exception as e:
        cprint(f"‚ùå Erro na simula√ß√£o: {str(e)}", "white", "on_red")

def live_monitor(token):
    """Monitor em tempo real de um token"""
    cprint(f"\nüì° MONITOR EM TEMPO REAL - {token}", "white", "on_blue")
    cprint("Pressione Ctrl+C para parar", "white", "on_blue")
    
    try:
        while True:
            # Coletar dados atuais
            data = collect_token_data(token, days_back=5, timeframe='3m')
            
            if data is None or len(data) < 200:
                cprint(f"‚ùå Dados insuficientes", "white", "on_red")
                time.sleep(30)
                continue
            
            # Aplicar indicadores
            data = calculate_distance_mme9(data)
            data = calculate_bollinger_on_distance(data)
            data = detect_exhaustion_signals(data)
            
            # Limpar tela (funciona no terminal)
            os.system('clear' if os.name == 'posix' else 'cls')
            
            # Mostrar dados atuais
            last_row = data.iloc[-1]
            
            cprint(f"üéØ MONITOR LIVE - {token}", "white", "on_blue")
            print(f"‚è∞ √öltima atualiza√ß√£o: {pd.Timestamp.now().strftime('%H:%M:%S')}")
            print("=" * 60)
            
            print(f"üí≤ Pre√ßo Atual: ${last_row['close']:.6f}")
            print(f"üìä MME9: ${last_row['MME9']:.6f}")
            print(f"üìè Dist√¢ncia: {last_row['distanciaMME9_pct']:+.2f}%")
            
            # Bollinger visual
            print_bollinger_visual(data)
            
            # Sinais atuais
            if last_row['reversao_alta']:
                cprint("\nüü¢ SINAL DE COMPRA ATIVO!", "white", "on_green")
            elif last_row['reversao_baixa']:
                cprint("\nüî¥ SINAL DE VENDA ATIVO!", "white", "on_red")
            elif last_row['exaustao_alta']:
                cprint("\n‚ö†Ô∏è EXAUST√ÉO DE ALTA - Aguardando revers√£o", "white", "on_yellow")
            elif last_row['exaustao_baixa']:
                cprint("\n‚ö†Ô∏è EXAUST√ÉO DE BAIXA - Aguardando revers√£o", "white", "on_yellow")
            else:
                cprint("\nüòê SEM SINAIS ATIVOS", "white", "on_cyan")
            
            # Aguardar pr√≥xima atualiza√ß√£o
            print(f"\n‚è≥ Pr√≥xima atualiza√ß√£o em 30 segundos...")
            time.sleep(30)
            
    except KeyboardInterrupt:
        cprint("\nüëã Monitor interrompido pelo usu√°rio", "white", "on_yellow")

if __name__ == "__main__":
    print("üéÆ SIMULADOR VISUAL DA ESTRAT√âGIA")
    print("=" * 50)
    print("1. Simula√ß√£o de Trading (20 per√≠odos)")
    print("2. Monitor em Tempo Real")
    print("3. An√°lise Visual Detalhada")
    
    try:
        choice = input("\nEscolha uma op√ß√£o (1-3): ").strip()
        
        print(f"\nTokens dispon√≠veis:")
        for i, token in enumerate(MONITORED_TOKENS, 1):
            print(f"{i}. {token}")
        
        token_choice = int(input("\nEscolha o n√∫mero do token: ")) - 1
        if 0 <= token_choice < len(MONITORED_TOKENS):
            selected_token = MONITORED_TOKENS[token_choice]
            
            if choice == "1":
                simulate_trading_session(selected_token)
            elif choice == "2":
                live_monitor(selected_token)
            elif choice == "3":
                # An√°lise detalhada
                data = collect_token_data(selected_token, days_back=10, timeframe='3m')
                if data is not None and len(data) >= 200:
                    data = calculate_distance_mme9(data)
                    data = calculate_bollinger_on_distance(data)
                    data = detect_exhaustion_signals(data)
                    
                    print_chart_ascii(data)
                    print_bollinger_visual(data)
                    
                    # Estat√≠sticas
                    cprint(f"\nüìä ESTAT√çSTICAS GERAIS:", "white", "on_blue")
                    print(f"Total de per√≠odos: {len(data)}")
                    print(f"Sinais de compra: {data['reversao_alta'].sum()}")
                    print(f"Sinais de venda: {data['reversao_baixa'].sum()}")
                    print(f"Per√≠odos em exaust√£o: {(data['exaustao_alta'] | data['exaustao_baixa']).sum()}")
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
        else:
            print("‚ùå Token inv√°lido!")
            
    except KeyboardInterrupt:
        print("\nüëã Simulador interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")